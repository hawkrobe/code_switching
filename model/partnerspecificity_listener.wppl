// run using, e.g.:
// webppl partnerspecificity.wppl --require ./refModule/ --require webppl-csv

var numUtterances = 4;
var numStates = 2;
var utterances = map(function(i) {return 'word' + i;}, _.range(1, numUtterances+1));
var states = map(function(i) {return 'object' + i;}, _.range(1, numStates+1));
var lexDims = [numUtterances, numStates];

var params = {
  alpha : argv.alpha,
  costWeight: argv.costWeight,
  model: argv.model,
  context: ['object1', 'object2'],
  primitiveUtterances: utterances,
  states : states,
  utterances : utterances
};

var tensorSoftplus = function(x) {
  return T.log(T.add(T.exp(x), 1));
};

var partnerGuide = function(paramName) {
  return function() {
    return DiagCovGaussian({
      mu: param({name: 'mu' + paramName, dims: lexDims, init: function(dims) {
        return T.mul(Tensor(lexDims, [1, -1, 1, -1, -1, 1, -1, 1]), .25);
      }}),
      sigma: tensorSoftplus(param({name: 'sigma' + paramName, dims: lexDims}))
    });
  };
};

var getPrior = function(mu) {
  return DiagCovGaussian({mu: mu, sigma: T.mul(ones(lexDims), 1)});
}

var sampleLexicon = function(partner) {
  var prior = getPrior(T.mul(Tensor(lexDims, [1, -1, 1, -1, -1, 1, -1, 1]), .25));
  if(params.model == 'no_pooling') {
    return sample(prior, {guide: partnerGuide(partner.id)});
  } else {
    var populationLevel = sample(prior, {guide: partnerGuide('hyper')});
    if(params.model == 'complete_pooling') {
      return populationLevel;
    } else if(params.model == 'hierarchical') {
      return sample(getPrior(populationLevel), {guide: partnerGuide(partner.id)});
    } else if(params.model == 'community') {
      var communityLevel = sample(getPrior(populationLevel), {guide: partnerGuide(partner.group)});
      return sample(getPrior(communityLevel), {guide: partnerGuide(partner.id)});
    }
  }
};

// literal listener (using real-valued lexicon)
var getPrediction = function(utt, context, partner) {
  console.log('getting prediction for partner', partner)
  return Infer({method:"enumerate"}, function(){
    var state = uniformDraw(context);
    var utility = expectation(Infer({method: 'forward', samples: 10000, guide: true}, function() {	  
      var lexicon = sampleLexicon(partner);
      return Math.exp(refModule.getSpeakerScore(utt, state, extend(params, {lexicon: lexicon})));
    }))

    factor(Math.log(utility));
    return state;
  });
};

// for each point in data, we want the model's predictions 
var iterate = function(outputFile, data) {
  return map(function(t) {
    // grab data up to this point
    var dataSoFar = data.slice(0,t);
    // run VI on current data
    Optimize({
      steps: 10000, verbose: true, optMethod: {adam: {stepSize: 0.001}},
      model: function() {
	var lexica = {
          1 : sampleLexicon({id: 1, group: 'red'}),
	  2 : sampleLexicon({id: 2, group: 'red'}),
	  3 : sampleLexicon({id: 3, group: 'red'}),
	  4 : sampleLexicon({id: 4, group: 'red'}),
	  5 : sampleLexicon({id: 5, group: 'blue'}),                    
        };
	mapData({data: dataSoFar}, function(trialDatum) {
	  var i = trialDatum.partner.id;
	  var lexicon = lexica[i];
          factor(refModule.getSpeakerScore(trialDatum.wordID, trialDatum.intendedName,
                                           extend(params, {lexicon: lexicon})));
	});
      }
    });

    // get marginal prediction of next data point
    var nextDataPoint = data[t];
    var prediction = getPrediction(nextDataPoint.wordID, ['object1', 'object2'],
                                   nextDataPoint.partner).score('object1');
    csv.writeLine([argv.model, t, nextDataPoint.partnerID, argv.alpha,argv.costWeight,
                   argv.chainNum, Math.exp(prediction)].join(','), outputFile);
  }, _.range(data.length ));
};

var data = [
  {partner: {id: 1, group: 'red'}, intendedName: 'object1', wordID: 'word1'},
  {partner: {id: 1, group: 'red'}, intendedName: 'object1', wordID: 'word1'},
  {partner: {id: 1, group: 'red'}, intendedName: 'object1', wordID: 'word1'},
  {partner: {id: 1, group: 'red'}, intendedName: 'object1', wordID: 'word1'},            
  {partner: {id: 2, group: 'red'}, intendedName: 'object1', wordID: 'word1'},
  {partner: {id: 2, group: 'red'}, intendedName: 'object1', wordID: 'word1'},
  {partner: {id: 2, group: 'red'}, intendedName: 'object1', wordID: 'word1'},
  {partner: {id: 2, group: 'red'}, intendedName: 'object1', wordID: 'word1'},            
  {partner: {id: 3, group: 'red'}, intendedName: 'object1', wordID: 'word1'},
  {partner: {id: 3, group: 'red'}, intendedName: 'object1', wordID: 'word1'},
  {partner: {id: 3, group: 'red'}, intendedName: 'object1', wordID: 'word1'},
  {partner: {id: 3, group: 'red'}, intendedName: 'object1', wordID: 'word1'}
];

// console.log(getPrediction('word1', ['object1', 'object2'], {id: 4, group: 'red'}))
// console.log(getPrediction('word1', ['object1', 'object2'], {id: 5, group: 'blue'}))

var f = csv.open('./output/listenerOutput' + argv.model + argv.chainNum + '.csv');
csv.writeLine('model,time,partnerID,alpha,cost,chainNum,prediction',f);
iterate(f, data);
csv.close(f);

console.log(getPrediction('word1', ['object1', 'object2'], {id: 4, group: 'red'}))
console.log(getPrediction('word1', ['object1', 'object2'],  {id: 5, group: 'blue'}))
