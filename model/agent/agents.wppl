// inference of speaker choosing an utterance
var S = function(object, posterior, params) {
  return Infer({method: 'enumerate'}, function () {
    var utt = uniformDraw(params.utterances);
    var inf = expectation(marginalize(posterior, 'lexicon'), function(lexicon) {
       return agent.getL0Score(object, utt, extend(params, {lexicon: lexicon[params.partnerID]}));
    });
    var utility = ((1-params.costWeight) * inf
                    - params.costWeight * agent.getUttCost(utt));

    factor(params.speakerAlpha * utility);
    return utt;
  })
};


// inference of listener choosing an object
var L = function(utt, posterior, params) {
  return Infer({method: 'enumerate'}, function () {
    var object = uniformDraw(params.context);
    var utility = expectation(marginalize(posterior, 'lexicon'), function(lexicon) {
      return agent.getS1Score(utt, object, extend(params, {lexicon: lexicon[params.partnerID]}));
    });
    factor(params.listenerAlpha * utility);
    return object;
  });
};

var updatePosterior = function(data, lexicalPrior, params) {
  return Infer(params.inferOptions, function() {
    var prior = lexicalPrior();
    var lexicon = prior.lexicon;
    var groupAssignment = prior.groupAssignment;
    var hyper1 = prior.hyperParams.group1hyperParams;
    var hyper2 = prior.hyperParams.group2hyperParams;

    mapData({data: data}, function(trial) {
      var beta = Math.pow(params.discountFactor,  data.length - trial.trialNum);
      var object = trial.role == 'speaker' ? trial.clickedName : trial.intendedName;
      var trialParams = extend(params, {context: trial.context, lexicon: lexicon[trial.partnerID]});
      if(trial.role == 'speaker') {
        factor(beta * agent.getL0Score(object, trial.wordID, trialParams));
      } else {
        factor(beta * agent.getS1Score(trial.wordID, object, trialParams));
      }
    });
    return {
      lexicon: lexicon,
      groupAssignment: groupAssignment,
      hyperParams: {
        group1hyper: hyper1,
        group2hyper: hyper2
      }
    };
  });
};
