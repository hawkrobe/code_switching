/*
Nonparametric group inference with CRP prior
*/
var utterances = ['word1', 'word2'];
var objects = ['A', 'B'];
var meanings = ['A', 'B'];
var numMeanings = meanings.length;
var partners = ['partner1', 'partner2', 'partner3', 'partner4'];
var model = 'FlexibleListenerGroups'

var params = {
    speakerAlpha: 5,
    listenerAlpha: 5,
    discountFactor: 0.9,
    guessingEpsilon: 0.01,
    costWeight: 0,
    numTrials: 20,
    context: objects,
    utterances: utterances,
    objects: objects,
    inferOptions: { method: 'MCMC', samples: 8000, burn: 5000, lag: 5, verbose: false },
    model: model,
    scalingFactor: 5,
    priorAlpha: 1  // CRP prior
};


// Functions for saving data
var f = csv.open('./output/nonparam/' + model + scalingFactor + '.csv');
csv.writeLine('model, speakerAlpha, listenerAlpha, costWeight, discountFactor, guessingEpsilon, scalingFactor,\
              priorAlpha, iterationNum, trialNum, speakerID, listenerID, partnerID, intendedName, speakerChoice, listenerChoice,\
            correctProb', f);

var writeLine = function (iterationNum, currTrial, speakerChoice, listenerChoice, listenerOutput) {
    csv.writeLine([
        params.model,
        params.speakerAlpha,
        params.listenerAlpha,
        params.costWeight,
        params.discountFactor,
        params.guessingEpsilon,
        params.scalingFactor,
        params.priorAlpha,
        iterationNum,
        currTrial.trialNum,
        currTrial.speakerID,
        currTrial.listenerID,
        currTrial.partnerID,
        currTrial.intendedName,
        speakerChoice,
        listenerChoice,
        listenerOutput.score(currTrial.intendedName),
    ].join(','), f);
};


var posttest_file = csv.open('./output/meaningTest_' + model + scalingFactor + '.csv');
csv.writeLine('model,speakerAlpha,listenerAlpha, discountFactor,guessingEpsilon, iterationNum, trialNum,\
                  speakerID, listenerID, partnerID,partner,val', posttest_file);

